#############################################################################
#
# config for acl helper
# internal value deliliter is :
# if value field must be omited then use ::
# long lines may be split by '\'
#
##############################################################################

# Debug level (0 - 9)
# Default is: 0
debug = 9

# Drop privs after start
# Optional, default is 'don't drop'
# Note: don't use this - squid starts the helper with its own privs
#user = nobody
#group = nogroup

# Max number of concurrently processed requests (1-255)
# If concurrency is 0 then the helper operates in old squid helper mode
# Squid conf help states:
#    ... concurrency=n concurrency level per process. Only used with helpers
#    capable of processing more than one query at a time.
# (http://www.squid-cache.org/Doc/config/external_acl_type/)
# Optional, default is 10
concurrency = 50

# pidfile name and location
# Default is not to create one
pidfile = /var/run/acl-helper.pid

# location of CA certificates bundle file for SSL verification
# Default is /etc/ssl/certs/ca-bundle.crt
ssl_ca_file = /etc/ssl/certs/ca-bundle.crt

# ssl certs verification result ttl, in seconds
# Default is 1d (86400)
ssl_verify_ttl = 3600

# ssl connection timeout
# Default is 10
ssl_timeout = 5

# ip cache positive ttl, in seconds
# Default is 1h (3600)
resolve_ttl = 360

# ip cache negative ttl, in seconds
# Default is 60 secons
resolve_neg_ttl = 60

# location of GeoIP2 db file
# (get it here: https://www.maxmind.com/en/geoip2-databases)
geoip2_db = /var/db/GeoLite2-City.mmdb


# Internal logging destination (file or syslog)
# Format:
#   type:ident:destination
# Where:
#   type        - log type (file or syslog)
#   ident       - log ident string
#   destination - file path for 'file' or facility for 'syslog'
# Ex:
#   file::/var/log/acl-helper.log
#   syslog:acl-helper2:local0
# Note:
#   Syslog ident defaults to current progname.
#   Syslog facility can be local0...local7 only, default is local0
#   Logging to stderr will be intercepted by squid and directed to /var/log/squid/cache.log
# Optional, default is to log to STDERR
#
#log = file:debug-mode:/tmp/acl-helper.log
#log = syslog:acl-helper-internal:local1

# Define various sources for data fetching
# Format:
#   source_name:driver:driver_opts
# Where:
#   source_name - uniq name of source to be used further
#   driver      - one of:
#                  raw - this file inline data delimited with commas
#                  file - regular file
#                  sqlite3 - sqlite3 database
#                  pgsql - postgresql database (NOT IMPLEMENTED)
#                  memcached - memcached (NOT IMPLEMENTED)
#                  dummy - dummy driver, not providing any data
#   driver_opts - driver options to connect (if database), path to file (if file),
#                 connection params (if memcached) or raw data string after 'raw:'
#                 delimited with commas
# Note:
#   memcache driver is NOT YET IMPLEMENTED
#
# Ex:
#   ignore_doms:raw:test.com,ssl.net,google.com
#   white_list_file:file:/var/config/wh.list
#   sqlite3_src:sqlite3:file:////var/db/mydb.sqlite3?mode=ro&cache=private
#   usersdb:pgsql:postgresql://user1:secret_pass@1.2.3.4:5432/my_db?connect_timeout=10
# Required, no default
#

source = src_db:sqlite3:file:////var/db/db.sqlite3?mode=ro
source = src_dummy:dummy:
source = src_proto_http:raw:HTTP
source = src_proto_https:raw:HTTPS
source = src_method_connect:raw:CONNECT

source = src_default_opts:raw:\
         ssl_inspection_enabled = 0,\
         block_untrusted_certificate = 0,\
         block_revocated_certificate = 0,\
         block_malicious_content_sites = 0,\
         block_cc_servers = 0,\
         block_phishing_sites = 0,\
         block_cookie_stealing = 0,\
         block_malicious_urls = 0,\
         block_browser_exploits = 0

source = src_cc_servers:file:/var/lists/list_cc_servers
source = src_phishing_sites:file:/var/lists/list_phishing_sites
source = src_cookie_stealing:file:/var/lists/list_cookie_stealing
source = src_malicious_content_sites:file:/var/lists/list_malicious_content_sites
source = src_malicious_urls:file:/var/lists/list_malicious_urls
source = src_browser_exploits:file:/var/lists/list_browser_exploits


# describe squid tokens indices here
# NOTE:
#   if 'concurrency' is > 0 then the first token send by squid
#   will be 'sequence id' which is then remembered by the helper and
#   not available for its checkers; thus all squid tokens count start
#   from 0 in any case
source = src_squid_idx:raw:\
  ACL = 0,\
  METHOD = 1,\
  SRC_IP = 2,\
  USER = 3,\
  PROTO = 4,\
  HOST = 5,\
  PORT = 6,\
  PATH = 7,\
  URL = 8
 

# Where and how to get runtime options
# Format:
#   name:source:params
# Where:
#   name   - uniq options scope name
#   source - name of source (see 'source' section above)
#   params - source params (query for sql, ignored for 'file')
# Options returned by source must be in form 'key=value' delimited by coma
# or newline
# Ex:
#   options_file:source_file_opts:
#   sql_opts:select name||"="||value from options
# Notes:
#   In case of sql source the query (params) must return one column
#   in form "option = value".
#   In case of file source the file must contain 'option = value'
#   pairs one pair per line.
# Required, no default

# options from DB have priority
options = opts_db:src_db:select option||"="||value from config

# use default (this file) options as last resort
options = opts_def:src_default_opts:

# very useful options: they give squid input tokens indices mnemonic names
options = squid:src_squid_idx:


# Checkers definitions, any number allowed, will be applied in order
# Format: 
#   name:enabled:idx:type:action:notes:source:[filter]
# Where:
#   name    - checker name
#   enabled - is checker enabled? 'on', 'off', !0 or 0 respectively
#   idx     - squid input line field index, starting from 0 (NOT including first 'request seq id')
#   type    - match method, one of:
#               dummy    - dummy type, always matches anything
#               string   - exect string matching,
#               match    - shell-like patterns matching,
#               regex    - posix regex matching,
#               pcre     - perl regex matching,
#               ip       - ipv4 addr matching,
#               resolve  - resolve given hostname and match over its ip(s)
#               dresolve - match give ip over a list of resolved hosts (useful 
#                          for dyndns and such)
#               ssl      - verify dst domain SSL cert - in case of https requests 
#                          targeted host SSL cert will be checked for validness and 
#                          its verification result will be placed in returning 'notes'
#                          as 'ssl_error=N' where N is an SSL error code (see 
#                          /usr/include/openssl/x509_vfy.h for valid codes);
#               geoip2   - determine geoip location by given ip/host using MaxMind geoip db;
#                          determined data will be returned in 'notes' and placed in
#                          'geoip2_continent=XX', 'geoip2_country=XX' and 'geoip2_city=XXX' strings,
#                          unavailable values will be shown as 'N/A'; geoip2 databases can be get there:
#                          https://www.maxmind.com/en/geoip2-databases
#             string, match, regex or pcre may be prepended by 'i' to specify
#             case insesitive match: istring, imatch, iregex, ipcre
#   action  - action to apply if match: 
#               hit  (or 0) - break checkers chain if match and return OK
#               miss (or 1) - break checkers chain if NO match and return ERR
#               note (or 2) - add checker note(s) to return notes list and continue
#                             (OK will be returned if 'note' is the last checker in chain
#   notes   - a so called 'note' string to include in result string
#   source  - source of match patterns (see 'source' section)
#   filter  - sql query for 'sql' based sources OR 
#             posix caseinsesitive eregex for 'file' based sources
# Ex:
#   phishing_urls:on:1:match:hit:phishing=yes:phish_file:^[^#]
#   https_only:1:2:string:miss:proto=https:urls_file:^https
#   good_domains:1:3:imatch:hit:DOMAIN=OK:remote_db:SELECT domain FROM white_list
#   ssl_mark:on:1:note::dummy:
# Note0:
#   In 'ssl' case 'idx' must be destination hostname and 'idx + 1' must be destination port.
#   If 'idx + 1' is absent or invalid then port 443 will be used
# Note1: 
#   In case of 'sql' source type the query must return at least one column - 
#   first one will be treated as record data, others will be discarded.
#   In case of 'file' source type each non-empty file line will be treated as pattern to match.
# Note2:
#   Any of 'enabled', 'idx', 'action', 'notes' sections
#   may be substituted by runtime option value (see 'options' above),
#   in which case corresponding checker field must be presented as runtime 
#   option name. Syntax is %{[scope&]name[|default]}, where:
#      scope   - options scope ('options' name from this config, see 'options' above)
#                if absent then any first suitable option name from any scope will be used
#      name    - option name (withing options scope)
#      default - default option value to use if no option with such name found
#   ex: %{option1}  - use 'option1' value from any scope
#   ex: %{&option1} - same as above
#   ex: %{option1|on} - use 'option1' value from any scope or word 'on' if not found
#   ex: %{scope1&option1|off} - use 'option1' from 'scope1' or word 'off' if not found
# Required, no defaults
#


# check is ActiveDirectory auth enabled
checker = auth_ad:\
          on:\
          0:\
          dummy:\
          note:\
          auth_ad=%{opts_db&ad_auth}0:\
          src_dummy:

# check is KRB5 auth enabled
checker = auth_krb5:\
          on:\
          0:\
          dummy:\
          note:\
          auth_krb5=%{opts_db&krb5_auth}0:\
          src_dummy:

# check is DB auth enabled
checker = auth_db:\
          on:\
          0:\
          dummy:\
          note:\
          auth_db=%{opts_db&db_auth}0:\
          src_dummy:

# check over c&c servers list
checker = cc_servers:\
          %{block_cc_servers}:\
          %{squid&HOST}:\
          resolve:\
          hit:\
          block_cc_servers=%{block_cc_servers}:\
          src_cc_servers:

# check over phishing sites list
checker = phishing_sites:\
          %{block_phishing_sites}:\
          %{squid&HOST}:\
          istring:\
          hit:\
          block_phishing_sites=%{block_phishing_sites}:\
          src_phishing_sites:

# check over cookie stealing list
checker = cookie_stealing:\
          %{block_cookie_stealing}:\
          %{squid&URL}:\
          string:\
          hit:\
          block_cookie_stealing=%{block_cookie_stealing}:\
          src_cookie_stealing:

# check over malicios sites list
checker = malicious_content_sites:\
          %{block_malicious_content_sites}:\
          %{squid&HOST}:\
          istring:\
          hit:\
          block_malicious_content_sites=%{block_malicious_content_sites}:\
          src_malicious_content_sites:

# check over malicious urls list
checker = malicious_urls:\
          %{block_malicious_urls}:\
          %{squid&HOST}:\
          istring:\
          hit:\
          block_malicious_urls=%{block_malicious_urls}:\
          src_malicious_urls:

# check over browser exploits list
checker = browser_exploits:\
          %{block_browser_exploits}:\
          %{squid&URL}:\
          string:\
          hit:\
          block_browser_exploits=%{block_browser_exploits}:\
          src_browser_exploits:


# extract some options for HTTPS proto acls
checker = https_flags:\
          %{ssl_inspection_enabled}:\
          0:\
          dummy:\
          note:\
          ssl_inspection_enabled=%{ssl_inspection_enabled} \
          block_untrusted_certificate=%{block_untrusted_certificate} \
          block_revocated_certificate=%{block_revocated_certificate}:\
          src_dummy:

# those domains should not be ssl-bumped or intercepted
checker = ssl_exclude_domains:\
          %{ssl_inspection_enabled}:\
          %{squid&HOST}:\
          istring:\
          hit:\
          ssl_exclude_domain=1:\
          src_db:SELECT name FROM ssl_bypass

# examine https ssl cert and verify it
# ('ssl_error=XX' will be added to notes automatically)
checker = ssl_cert:\
          %{ssl_inspection_enabled}:\
          %{squid&HOST}:\
          ssl:\
          note:\
          :\
          src_dummy:

# guess and return geoip location of destination host
# ('geoip2_country=XX', 'geoip2_continent=XX' and 'geoip2_city=XX' will be added to notes automatically)
checker = geoip2:\
          1:\
          %{squid&HOST}:\
          geoip2:\
          note:\
          :\
          src_dummy:


############################ the end ##################################

